{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard ERC20 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\n */\ninterface IERC20Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC20InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC20InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `spender`’s `allowance`. Used in transfers.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\n     * @param needed Minimum amount required to perform a transfer.\n     */\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC20InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC20InvalidSpender(address spender);\n}\n\n/**\n * @dev Standard ERC721 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\n */\ninterface IERC721Errors {\n    /**\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\n     * Used in balance queries.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721InvalidOwner(address owner);\n\n    /**\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721NonexistentToken(uint256 tokenId);\n\n    /**\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param tokenId Identifier number of a token.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC721InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC721InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC721InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC721InvalidOperator(address operator);\n}\n\n/**\n * @dev Standard ERC1155 Errors\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\n */\ninterface IERC1155Errors {\n    /**\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     * @param balance Current balance for the interacting account.\n     * @param needed Minimum amount required to perform a transfer.\n     * @param tokenId Identifier number of a token.\n     */\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\n\n    /**\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\n     * @param sender Address whose tokens are being transferred.\n     */\n    error ERC1155InvalidSender(address sender);\n\n    /**\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\n     * @param receiver Address to which tokens are being transferred.\n     */\n    error ERC1155InvalidReceiver(address receiver);\n\n    /**\n     * @dev Indicates a failure with the `operator`’s approval. Used in transfers.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     * @param owner Address of the current owner of a token.\n     */\n    error ERC1155MissingApprovalForAll(address operator, address owner);\n\n    /**\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\n     * @param approver Address initiating an approval operation.\n     */\n    error ERC1155InvalidApprover(address approver);\n\n    /**\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\n     */\n    error ERC1155InvalidOperator(address operator);\n\n    /**\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\n     * Used in batch transfers.\n     * @param idsLength Length of the array of token identifiers\n     * @param valuesLength Length of the array of token amounts\n     */\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/ERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"./IERC1155.sol\";\nimport {IERC1155Receiver} from \"./IERC1155Receiver.sol\";\nimport {IERC1155MetadataURI} from \"./extensions/IERC1155MetadataURI.sol\";\nimport {Context} from \"../../utils/Context.sol\";\nimport {IERC165, ERC165} from \"../../utils/introspection/ERC165.sol\";\nimport {Arrays} from \"../../utils/Arrays.sol\";\nimport {IERC1155Errors} from \"../../interfaces/draft-IERC6093.sol\";\n\n/**\n * @dev Implementation of the basic standard multi-token.\n * See https://eips.ethereum.org/EIPS/eip-1155\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\n */\nabstract contract ERC1155 is Context, ERC165, IERC1155, IERC1155MetadataURI, IERC1155Errors {\n    using Arrays for uint256[];\n    using Arrays for address[];\n\n    mapping(uint256 id => mapping(address account => uint256)) private _balances;\n\n    mapping(address account => mapping(address operator => bool)) private _operatorApprovals;\n\n    // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\n    string private _uri;\n\n    /**\n     * @dev See {_setURI}.\n     */\n    constructor(string memory uri_) {\n        _setURI(uri_);\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC1155).interfaceId ||\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC1155MetadataURI-uri}.\n     *\n     * This implementation returns the same URI for *all* token types. It relies\n     * on the token type ID substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * Clients calling this function must replace the `\\{id\\}` substring with the\n     * actual token type ID.\n     */\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\n        return _uri;\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOf}.\n     */\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\n        return _balances[id][account];\n    }\n\n    /**\n     * @dev See {IERC1155-balanceOfBatch}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] memory accounts,\n        uint256[] memory ids\n    ) public view virtual returns (uint256[] memory) {\n        if (accounts.length != ids.length) {\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\n        }\n\n        uint256[] memory batchBalances = new uint256[](accounts.length);\n\n        for (uint256 i = 0; i < accounts.length; ++i) {\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\n        }\n\n        return batchBalances;\n    }\n\n    /**\n     * @dev See {IERC1155-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC1155-isApprovedForAll}.\n     */\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\n        return _operatorApprovals[account][operator];\n    }\n\n    /**\n     * @dev See {IERC1155-safeTransferFrom}.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeTransferFrom(from, to, id, value, data);\n    }\n\n    /**\n     * @dev See {IERC1155-safeBatchTransferFrom}.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) public virtual {\n        address sender = _msgSender();\n        if (from != sender && !isApprovedForAll(from, sender)) {\n            revert ERC1155MissingApprovalForAll(sender, from);\n        }\n        _safeBatchTransferFrom(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\n     * (or `to`) is the zero address.\n     *\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     *\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\n     */\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\n        if (ids.length != values.length) {\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\n        }\n\n        address operator = _msgSender();\n\n        for (uint256 i = 0; i < ids.length; ++i) {\n            uint256 id = ids.unsafeMemoryAccess(i);\n            uint256 value = values.unsafeMemoryAccess(i);\n\n            if (from != address(0)) {\n                uint256 fromBalance = _balances[id][from];\n                if (fromBalance < value) {\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\n                }\n                unchecked {\n                    // Overflow not possible: value <= fromBalance\n                    _balances[id][from] = fromBalance - value;\n                }\n            }\n\n            if (to != address(0)) {\n                _balances[id][to] += value;\n            }\n        }\n\n        if (ids.length == 1) {\n            uint256 id = ids.unsafeMemoryAccess(0);\n            uint256 value = values.unsafeMemoryAccess(0);\n            emit TransferSingle(operator, from, to, id, value);\n        } else {\n            emit TransferBatch(operator, from, to, ids, values);\n        }\n    }\n\n    /**\n     * @dev Version of {_update} that performs the token acceptance check by calling\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\n     * contains code (eg. is a smart contract at the moment of execution).\n     *\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\n     * overriding {_update} instead.\n     */\n    function _updateWithAcceptanceCheck(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal virtual {\n        _update(from, to, ids, values);\n        if (to != address(0)) {\n            address operator = _msgSender();\n            if (ids.length == 1) {\n                uint256 id = ids.unsafeMemoryAccess(0);\n                uint256 value = values.unsafeMemoryAccess(0);\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\n            } else {\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\n            }\n        }\n    }\n\n    /**\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     * - `ids` and `values` must have the same length.\n     */\n    function _safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\n    }\n\n    /**\n     * @dev Sets a new URI for all token types, by relying on the token type ID\n     * substitution mechanism\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\n     *\n     * By this mechanism, any occurrence of the `\\{id\\}` substring in either the\n     * URI or any of the values in the JSON file at said URI will be replaced by\n     * clients with the token type ID.\n     *\n     * For example, the `https://token-cdn-domain/\\{id\\}.json` URI would be\n     * interpreted by clients as\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\n     * for token type ID 0x4cce0.\n     *\n     * See {uri}.\n     *\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\n     * this function emits no events.\n     */\n    function _setURI(string memory newuri) internal virtual {\n        _uri = newuri;\n    }\n\n    /**\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - `to` cannot be the zero address.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\n        if (to == address(0)) {\n            revert ERC1155InvalidReceiver(address(0));\n        }\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\n    }\n\n    /**\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     */\n    function _burn(address from, uint256 id, uint256 value) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\n     *\n     * Emits a {TransferBatch} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `from` must have at least `value` amount of tokens of type `id`.\n     * - `ids` and `values` must have the same length.\n     */\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\n        if (from == address(0)) {\n            revert ERC1155InvalidSender(address(0));\n        }\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \"\");\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the zero address.\n     */\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\n        if (operator == address(0)) {\n            revert ERC1155InvalidOperator(address(0));\n        }\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256 id,\n        uint256 value,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\n     * if it contains code at the moment of execution.\n     */\n    function _doSafeBatchTransferAcceptanceCheck(\n        address operator,\n        address from,\n        address to,\n        uint256[] memory ids,\n        uint256[] memory values,\n        bytes memory data\n    ) private {\n        if (to.code.length > 0) {\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\n                bytes4 response\n            ) {\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\n                    // Tokens rejected\n                    revert ERC1155InvalidReceiver(to);\n                }\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    // non-ERC1155Receiver implementer\n                    revert ERC1155InvalidReceiver(to);\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * @dev Creates an array in memory with only one value for each of the elements provided.\n     */\n    function _asSingletonArrays(\n        uint256 element1,\n        uint256 element2\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            // Load the free memory pointer\n            array1 := mload(0x40)\n            // Set array length to 1\n            mstore(array1, 1)\n            // Store the single element at the next word after the length (where content starts)\n            mstore(add(array1, 0x20), element1)\n\n            // Repeat for next array locating it right after the first array\n            array2 := add(array1, 0x40)\n            mstore(array2, 1)\n            mstore(add(array2, 0x20), element2)\n\n            // Update the free memory pointer by pointing after the second array\n            mstore(0x40, add(array2, 0x40))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC1155} from \"../IERC1155.sol\";\n\n/**\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\n */\ninterface IERC1155MetadataURI is IERC1155 {\n    /**\n     * @dev Returns the URI for token type `id`.\n     *\n     * If the `\\{id\\}` substring is present in the URI, it must be replaced by\n     * clients with the actual token type ID.\n     */\n    function uri(uint256 id) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\n */\ninterface IERC1155 is IERC165 {\n    /**\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\n     */\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\n\n    /**\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\n     * transfers.\n     */\n    event TransferBatch(\n        address indexed operator,\n        address indexed from,\n        address indexed to,\n        uint256[] ids,\n        uint256[] values\n    );\n\n    /**\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\n     * `approved`.\n     */\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\n\n    /**\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\n     *\n     * If an {URI} event was emitted for `id`, the standard\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\n     * returned by {IERC1155MetadataURI-uri}.\n     */\n    event URI(string value, uint256 indexed id);\n\n    /**\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\n     *\n     * Requirements:\n     *\n     * - `accounts` and `ids` must have the same length.\n     */\n    function balanceOfBatch(\n        address[] calldata accounts,\n        uint256[] calldata ids\n    ) external view returns (uint256[] memory);\n\n    /**\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\n     *\n     * Emits an {ApprovalForAll} event.\n     *\n     * Requirements:\n     *\n     * - `operator` cannot be the caller.\n     */\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /**\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\n     *\n     * See {setApprovalForAll}.\n     */\n    function isApprovedForAll(address account, address operator) external view returns (bool);\n\n    /**\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits a {TransferSingle} event.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\n     * acceptance magic value.\n     */\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\n\n    /**\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\n     *\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\n     * reentrancy guards when interacting with untrusted contracts.\n     *\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\n     *\n     * Requirements:\n     *\n     * - `ids` and `values` must have the same length.\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\n     * acceptance magic value.\n     */\n    function safeBatchTransferFrom(\n        address from,\n        address to,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external;\n}\n"
    },
    "@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Interface that must be implemented by smart contracts in order to receive\n * ERC-1155 token transfers.\n */\ninterface IERC1155Receiver is IERC165 {\n    /**\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\n     *\n     * NOTE: To accept the transfer, this must return\n     * `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))`\n     * (i.e. 0xf23a6e61, or its own function selector).\n     *\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param id The ID of the token being transferred\n     * @param value The amount of tokens being transferred\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155Received(address,address,uint256,uint256,bytes)\"))` if transfer is allowed\n     */\n    function onERC1155Received(\n        address operator,\n        address from,\n        uint256 id,\n        uint256 value,\n        bytes calldata data\n    ) external returns (bytes4);\n\n    /**\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\n     * been updated.\n     *\n     * NOTE: To accept the transfer(s), this must return\n     * `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))`\n     * (i.e. 0xbc197c81, or its own function selector).\n     *\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\n     * @param from The address which previously owned the token\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\n     * @param data Additional data with no specified format\n     * @return `bytes4(keccak256(\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\"))` if transfer is allowed\n     */\n    function onERC1155BatchReceived(\n        address operator,\n        address from,\n        uint256[] calldata ids,\n        uint256[] calldata values,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Arrays.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\n\npragma solidity ^0.8.20;\n\nimport {StorageSlot} from \"./StorageSlot.sol\";\nimport {Math} from \"./math/Math.sol\";\n\n/**\n * @dev Collection of functions related to array types.\n */\nlibrary Arrays {\n    using StorageSlot for bytes32;\n\n    /**\n     * @dev Searches a sorted `array` and returns the first index that contains\n     * a value greater or equal to `element`. If no such index exists (i.e. all\n     * values in the array are strictly less than `element`), the array length is\n     * returned. Time complexity O(log n).\n     *\n     * `array` is expected to be sorted in ascending order, and to contain no\n     * repeated elements.\n     */\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\n        uint256 low = 0;\n        uint256 high = array.length;\n\n        if (high == 0) {\n            return 0;\n        }\n\n        while (low < high) {\n            uint256 mid = Math.average(low, high);\n\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\n            // because Math.average rounds towards zero (it does integer division with truncation).\n            if (unsafeAccess(array, mid).value > element) {\n                high = mid;\n            } else {\n                low = mid + 1;\n            }\n        }\n\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\n            return low - 1;\n        } else {\n            return low;\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getAddressSlot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getBytes32Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\n        bytes32 slot;\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\n\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0, arr.slot)\n            slot := add(keccak256(0, 0x20), pos)\n        }\n        return slot.getUint256Slot();\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n\n    /**\n     * @dev Access an array in an \"unsafe\" way. Skips solidity \"index-out-of-range\" check.\n     *\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\n     */\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\n        assembly {\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.20;\n\nimport {IERC165} from \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    /**\n     * @dev Muldiv operation overflow.\n     */\n    error MathOverflowedMulDiv();\n\n    enum Rounding {\n        Floor, // Toward negative infinity\n        Ceil, // Toward positive infinity\n        Trunc, // Toward zero\n        Expand // Away from zero\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds towards infinity instead\n     * of rounding towards zero.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (b == 0) {\n            // Guarantee the same behavior as in a regular Solidity division.\n            return a / b;\n        }\n\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\n     * denominator == 0.\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\n     * Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            if (denominator <= prod1) {\n                revert MathOverflowedMulDiv();\n            }\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\n\n            uint256 twos = denominator & (0 - denominator);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\n            // works in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\n     * towards zero.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\n     */\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\n        return uint8(rounding) % 2 == 1;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/math/SignedMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/StorageSlot.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\n\npragma solidity ^0.8.20;\n\nimport {Math} from \"./math/Math.sol\";\nimport {SignedMath} from \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant HEX_DIGITS = \"0123456789abcdef\";\n    uint8 private constant ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev The `value` string doesn't fit in the specified `length`.\n     */\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toStringSigned(int256 value) internal pure returns (string memory) {\n        return string.concat(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value)));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        uint256 localValue = value;\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\n            localValue >>= 4;\n        }\n        if (localValue != 0) {\n            revert StringsInsufficientHexLength(value, length);\n        }\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\n     * representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"
    },
    "contracts/AvamonCore.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity >=0.8.0 <0.9.0;\r\n\r\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\r\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\r\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\r\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\r\n\r\n// Import interfaces for the token contracts and admin contract\r\ninterface IAvamonToken {\r\n    function transfer(address to, uint256 amount) external returns (bool);\r\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\r\n    function balanceOf(address account) external view returns (uint256);\r\n    function approve(address spender, uint256 amount) external returns (bool);\r\n}\r\n\r\ninterface IAvamonCards {\r\n    function ownerOf(uint256 tokenId) external view returns (address);\r\n    function transferFrom(address from, address to, uint256 tokenId) external;\r\n    function mintCard(\r\n        address to,\r\n        uint256 templateId,\r\n        uint256 attack,\r\n        uint256 defense,\r\n        uint256 agility,\r\n        uint256 hp,\r\n        uint8 rarity\r\n    ) external returns (uint256);\r\n    function batchMintCards(\r\n        address to,\r\n        uint256[] calldata templateIds,\r\n        uint256[] calldata attacks,\r\n        uint256[] calldata defenses,\r\n        uint256[] calldata agilities,\r\n        uint256[] calldata hps,\r\n        uint8[] calldata rarities\r\n    ) external returns (uint256[] memory);\r\n    function exists(uint256 tokenId) external view returns (bool);\r\n}\r\n\r\ninterface IAvamonPacks {\r\n    function balanceOf(address account, uint256 id) external view returns (uint256);\r\n    function mintPack(address to, uint256 packId, uint256 amount) external;\r\n    function burnPack(address from, uint256 packId, uint256 amount) external;\r\n    function getNextPackId() external view returns (uint256);\r\n    function getPackTypeInfo(uint256 packId) external view returns (uint256 packTypeId, string memory name, uint256 price, bool isActive);\r\n    function getAllPackTypes() external view returns (uint256[] memory);\r\n    function emergencyBurnPacks(address from, uint256 packId, uint256 amount) external;\r\n    function updatePackMetadata(uint256 packId, string memory newUri) external;\r\n    function createPackType(uint256 packTypeId, string memory name, uint256 price) external;\r\n}\r\n\r\n// Interface for admin functions (called by AvamonAdmin contract)\r\ninterface IAvamonCoreAdmin {\r\n    function createCardTemplate(string memory _name, uint8 _rarity, uint256 _attack, uint256 _defense, uint256 _agility, uint256 _hp) external;\r\n    function updateCardTemplate(uint256 _templateId, bool _isActive) external;\r\n    function createPackType(string memory _name, uint256 _price, uint8[3] memory _rarityChances) external;\r\n    function updatePackType(uint256 _packTypeId, bool _isActive) external;\r\n    function createAdventure(string memory _name, string memory _description, uint256 _entryFee, uint256 _minReward, uint256 _maxReward, uint256 _duration, uint256 _packDropChance, uint256 _packTypeId) external;\r\n    function updateAdventure(uint256 _adventureId, bool _isActive) external;\r\n    function createQuest(uint8 _questType, string memory _title, string memory _description, uint256 _rewardAmount, bool _isPackReward, uint256 _packTypeId, uint256 _targetValue, uint256 _timeWindow) external;\r\n    function updateQuest(uint256 _questId, bool _isActive) external;\r\n    function emergencyResetUserEnergy(address _user, uint256 _energyAmount) external;\r\n    function emergencyForceCompleteAdventure(address _user, uint256 _adventureId) external;\r\n    function toggleEmergencyMode() external;\r\n}\r\n\r\n/**\r\n * @title AvamonCore\r\n * @dev Main game contract for Avamon TCG with VRF integration\r\n * Coordinates between token contracts for game logic\r\n */\r\ncontract AvamonCore is Ownable, ReentrancyGuard, Pausable {\r\n    // Contract addresses\r\n    IAvamonToken public immutable avamonToken;\r\n    IAvamonCards public immutable avamonCards;\r\n    IAvamonPacks public immutable avamonPacks;\r\n\r\n    // Admin contract address (set after deployment)\r\n    address public adminContract;\r\n\r\n    // Game Constants\r\n    uint256 private constant DAILY_ENERGY = 10;\r\n    uint256 private constant ENERGY_REFILL_COST = 0.01 ether;\r\n    uint256 private constant MAX_DECK_SLOTS_DEFAULT = 2;\r\n    uint256 private constant MAX_DECK_SLOTS_PREMIUM = 3;\r\n    uint256 private constant DECK_SLOT_UPGRADE_COST = 0.1 ether;\r\n    uint256 private constant MIN_ADVENTURE_DURATION = 10 minutes;\r\n\r\n    // Pack Opener contract address\r\n    address public packOpenerContract;\r\n\r\n    // Quest Types\r\n    enum QuestType { DailyCheckin, WinBattles, OpenPacks, Custom }\r\n\r\n    // Structs\r\n    struct CardTemplate {\r\n        uint256 id;\r\n        string name;\r\n        uint8 rarity;\r\n        uint256 attack;\r\n        uint256 defense;\r\n        uint256 agility;\r\n        uint256 hp;\r\n        bool isActive;\r\n    }\r\n\r\n    struct PackType {\r\n        uint256 id;\r\n        string name;\r\n        uint256 price;\r\n        uint8[3] rarityChances; // [common%, rare%, mythic%]\r\n        bool isActive;\r\n    }\r\n\r\n    struct PackInfo {\r\n        uint256 packTypeId;\r\n        string name;\r\n        uint256 price;\r\n        bool isActive;\r\n    }\r\n\r\n    struct Adventure {\r\n        uint256 id;\r\n        string name;\r\n        string description;\r\n        uint256 entryFee;\r\n        uint256 minReward;\r\n        uint256 maxReward;\r\n        uint256 duration;\r\n        uint256 packDropChance;\r\n        uint256 packTypeId;\r\n        bool isActive;\r\n    }\r\n\r\n    struct ActiveAdventure {\r\n        uint256 adventureId;\r\n        uint256 startTime;\r\n        uint256[] avamonIds;\r\n        bool isCompleted;\r\n        bool rewardClaimed;\r\n    }\r\n\r\n    struct PlayerDeck {\r\n        uint256[] avamonIds;\r\n        string name;\r\n    }\r\n\r\n    struct Quest {\r\n        uint256 id;\r\n        QuestType questType;\r\n        string title;\r\n        string description;\r\n        uint256 rewardAmount;\r\n        bool isPackReward;\r\n        uint256 packTypeId;\r\n        uint256 targetValue;\r\n        uint256 timeWindow; // 1 for daily, 7 for weekly\r\n        bool isActive;\r\n    }\r\n\r\n    struct UserQuestProgress {\r\n        uint256 questId;\r\n        uint256 progress;\r\n        bool isCompleted;\r\n        bool isClaimed;\r\n        uint256 lastUpdated;\r\n        uint256 resetTime;\r\n    }\r\n\r\n    // State Variables\r\n    mapping(uint256 => CardTemplate) public cardTemplates;\r\n    mapping(uint256 => PackType) public packTypes;\r\n    mapping(uint256 => Adventure) public adventures;\r\n\r\n    mapping(address => mapping(uint256 => ActiveAdventure)) public activeAdventures;\r\n    mapping(address => PlayerDeck[]) public savedDecks;\r\n    mapping(address => uint256) public maxDeckSlots;\r\n    mapping(address => uint256) public energyRemaining;\r\n    mapping(address => uint256) public lastEnergyResetIST;\r\n\r\n\r\n    // Rarity distribution for each pack type\r\n    uint256[] private commonCardIds;\r\n    uint256[] private rareCardIds;\r\n    uint256[] private mythicCardIds;\r\n\r\n    uint256 private nextCardTemplateId = 1;\r\n    uint256 private nextPackTypeId = 1;\r\n    uint256 private nextAdventureId = 1;\r\n    uint256 private nextQuestId = 1;\r\n\r\n    // Quest mappings\r\n    mapping(uint256 => Quest) public quests;\r\n    mapping(address => mapping(uint256 => UserQuestProgress)) public userQuestProgress;\r\n    mapping(address => uint256[]) public userActiveQuests;\r\n    mapping(address => uint256) public userWeeklyQuestSlots;\r\n\r\n    // Events\r\n    event CardTemplateCreated(uint256 indexed templateId, string name, uint8 rarity);\r\n    event CardTemplateUpdated(uint256 indexed templateId, bool isActive);\r\n    event PackTypeCreated(uint256 indexed packTypeId, string name, uint256 price);\r\n    event PackTypeUpdated(uint256 indexed packTypeId, bool isActive);\r\n    event AdventureCreated(uint256 indexed adventureId, string name, uint256 entryFee);\r\n    event AdventureUpdated(uint256 indexed adventureId, bool isActive);\r\n    event AdventureJoined(address indexed player, uint256 indexed adventureId, uint256[] avamonIds);\r\n    event AdventureCompleted(address indexed player, uint256 indexed adventureId, uint256 reward, bool packDropped);\r\n    event PackOpened(address indexed player, uint256 indexed packId, uint256[] avamonIds);\r\n    event EnergyPurchased(address indexed player, uint256 energyAmount, uint256 cost);\r\n    event DeckSlotUpgraded(address indexed player, uint256 newMaxSlots);\r\n    event DeckSaved(address indexed player, uint256 deckIndex, string name);\r\n    event AvamonMinted(address indexed to, uint256 indexed tokenId, uint256 templateId);\r\n    event PackMinted(address indexed to, uint256 indexed tokenId, uint256 packTypeId);\r\n\r\n    // Quest Events\r\n    event QuestCreated(uint256 indexed questId, QuestType questType, string title);\r\n    event QuestUpdated(uint256 indexed questId, bool isActive);\r\n    event EnergyReset(address indexed user, uint256 energyAmount);\r\n    event EmergencyModeToggled();\r\n    event QuestProgressUpdated(address indexed player, uint256 indexed questId, uint256 progress);\r\n    event QuestCompleted(address indexed player, uint256 indexed questId);\r\n    event QuestRewardClaimed(address indexed player, uint256 indexed questId, uint256 rewardAmount, bool isPack);\r\n    event WeeklyQuestSlotPurchased(address indexed player, uint256 cost);\r\n\r\n    // Modifiers\r\n    modifier onlyValidAdventure(uint256 _adventureId) {\r\n        require(adventures[_adventureId].isActive, \"Adventure not active\");\r\n        require(adventures[_adventureId].duration >= MIN_ADVENTURE_DURATION, \"Adventure duration too short\");\r\n        _;\r\n    }\r\n\r\n    modifier adventureNotActive(address _player, uint256 _adventureId) {\r\n        require(activeAdventures[_player][_adventureId].startTime == 0, \"Adventure already active\");\r\n        _;\r\n    }\r\n\r\n    modifier adventureActive(address _player, uint256 _adventureId) {\r\n        require(activeAdventures[_player][_adventureId].startTime > 0, \"Adventure not active\");\r\n        require(!activeAdventures[_player][_adventureId].isCompleted, \"Adventure already completed\");\r\n        _;\r\n    }\r\n\r\n    modifier hasEnergy(address _player, uint256 _required) {\r\n        _resetEnergyIfNeeded(_player);\r\n        require(energyRemaining[_player] >= _required, \"Not enough energy\");\r\n        _;\r\n    }\r\n\r\n    modifier ownsAvamons(address _player, uint256[] memory _avamonIds) {\r\n        for (uint256 i = 0; i < _avamonIds.length; i++) {\r\n            require(avamonCards.ownerOf(_avamonIds[i]) == _player, \"Does not own Avamon\");\r\n        }\r\n        _;\r\n    }\r\n\r\n    modifier onlyAdmin() {\r\n        require(msg.sender == adminContract, \"Only admin contract can call this\");\r\n        _;\r\n    }\r\n\r\n    constructor(\r\n        address initialOwner,\r\n        address _avamonToken,\r\n        address _avamonCards,\r\n        address _avamonPacks\r\n    )\r\n        Ownable(initialOwner)\r\n    {\r\n        avamonToken = IAvamonToken(_avamonToken);\r\n        avamonCards = IAvamonCards(_avamonCards);\r\n        avamonPacks = IAvamonPacks(_avamonPacks);\r\n\r\n        // Initialize default deck slots\r\n        maxDeckSlots[msg.sender] = MAX_DECK_SLOTS_DEFAULT;\r\n    }\r\n\r\n    // ============ ADMIN FUNCTIONS (Called by AvamonAdmin) ============\r\n\r\n    function createCardTemplate(\r\n        string memory _name,\r\n        uint8 _rarity,\r\n        uint256 _attack,\r\n        uint256 _defense,\r\n        uint256 _agility,\r\n        uint256 _hp\r\n    ) external onlyAdmin {\r\n        require(_rarity <= 2, \"Invalid rarity\");\r\n\r\n        uint256 templateId = nextCardTemplateId++;\r\n        cardTemplates[templateId] = CardTemplate({\r\n            id: templateId,\r\n            name: _name,\r\n            rarity: _rarity,\r\n            attack: _attack,\r\n            defense: _defense,\r\n            agility: _agility,\r\n            hp: _hp,\r\n            isActive: true\r\n        });\r\n\r\n        // Add to appropriate rarity arrays for efficient random selection\r\n        if (_rarity == 0) commonCardIds.push(templateId);\r\n        else if (_rarity == 1) rareCardIds.push(templateId);\r\n        else mythicCardIds.push(templateId);\r\n\r\n        emit CardTemplateCreated(templateId, _name, _rarity);\r\n    }\r\n\r\n    function updateCardTemplate(uint256 _templateId, bool _isActive) external onlyAdmin {\r\n        require(cardTemplates[_templateId].id != 0, \"Template doesn't exist\");\r\n        cardTemplates[_templateId].isActive = _isActive;\r\n        emit CardTemplateUpdated(_templateId, _isActive);\r\n    }\r\n\r\n    function createPackType(\r\n        string memory _name,\r\n        uint256 _price,\r\n        uint8[3] memory _rarityChances\r\n    ) external onlyAdmin {\r\n        require(_rarityChances[0] + _rarityChances[1] + _rarityChances[2] == 100, \"Chances must sum to 100\");\r\n\r\n        uint256 packTypeId = nextPackTypeId++;\r\n        packTypes[packTypeId] = PackType({\r\n            id: packTypeId,\r\n            name: _name,\r\n            price: _price,\r\n            rarityChances: _rarityChances,\r\n            isActive: true\r\n        });\r\n\r\n        // Also create pack info in AvamonPacks contract\r\n        avamonPacks.createPackType(packTypeId, _name, _price);\r\n\r\n        emit PackTypeCreated(packTypeId, _name, _price);\r\n    }\r\n\r\n    function updatePackType(uint256 _packTypeId, bool _isActive) external onlyAdmin {\r\n        require(packTypes[_packTypeId].id != 0, \"Pack type doesn't exist\");\r\n        packTypes[_packTypeId].isActive = _isActive;\r\n        emit PackTypeUpdated(_packTypeId, _isActive);\r\n    }\r\n\r\n    function createAdventure(\r\n        string memory _name,\r\n        string memory _description,\r\n        uint256 _entryFee,\r\n        uint256 _minReward,\r\n        uint256 _maxReward,\r\n        uint256 _duration,\r\n        uint256 _packDropChance,\r\n        uint256 _packTypeId\r\n    ) external onlyAdmin {\r\n        require(_duration >= MIN_ADVENTURE_DURATION, \"Duration too short\");\r\n        require(_minReward <= _maxReward, \"Invalid reward range\");\r\n        require(_packDropChance <= 100, \"Invalid pack drop chance\");\r\n        require(packTypes[_packTypeId].id != 0, \"Pack type doesn't exist\");\r\n\r\n        uint256 adventureId = nextAdventureId++;\r\n        adventures[adventureId] = Adventure({\r\n            id: adventureId,\r\n            name: _name,\r\n            description: _description,\r\n            entryFee: _entryFee,\r\n            minReward: _minReward,\r\n            maxReward: _maxReward,\r\n            duration: _duration,\r\n            packDropChance: _packDropChance,\r\n            packTypeId: _packTypeId,\r\n            isActive: true\r\n        });\r\n\r\n        emit AdventureCreated(adventureId, _name, _entryFee);\r\n    }\r\n\r\n    function updateAdventure(uint256 _adventureId, bool _isActive) external onlyAdmin {\r\n        require(adventures[_adventureId].id != 0, \"Adventure doesn't exist\");\r\n        adventures[_adventureId].isActive = _isActive;\r\n        emit AdventureUpdated(_adventureId, _isActive);\r\n    }\r\n\r\n    function createQuest(\r\n        QuestType _questType,\r\n        string memory _title,\r\n        string memory _description,\r\n        uint256 _rewardAmount,\r\n        bool _isPackReward,\r\n        uint256 _packTypeId,\r\n        uint256 _targetValue,\r\n        uint256 _timeWindow\r\n    ) external onlyAdmin {\r\n        require(_timeWindow == 1 || _timeWindow == 7, \"Time window must be 1 (daily) or 7 (weekly)\");\r\n        require(!_isPackReward || packTypes[_packTypeId].id != 0, \"Invalid pack type for reward\");\r\n\r\n        uint256 questId = nextQuestId++;\r\n        quests[questId] = Quest({\r\n            id: questId,\r\n            questType: _questType,\r\n            title: _title,\r\n            description: _description,\r\n            rewardAmount: _rewardAmount,\r\n            isPackReward: _isPackReward,\r\n            packTypeId: _packTypeId,\r\n            targetValue: _targetValue,\r\n            timeWindow: _timeWindow,\r\n            isActive: true\r\n        });\r\n\r\n        emit QuestCreated(questId, _questType, _title);\r\n    }\r\n\r\n    function updateQuest(uint256 _questId, bool _isActive) external onlyAdmin {\r\n        require(quests[_questId].id != 0, \"Quest doesn't exist\");\r\n        quests[_questId].isActive = _isActive;\r\n        emit QuestUpdated(_questId, _isActive);\r\n    }\r\n\r\n    function emergencyResetUserEnergy(address _user, uint256 _energyAmount) external onlyAdmin {\r\n        _resetEnergyIfNeeded(_user);\r\n        energyRemaining[_user] = _energyAmount;\r\n        emit EnergyReset(_user, _energyAmount);\r\n    }\r\n\r\n    function emergencyForceCompleteAdventure(address _user, uint256 _adventureId) external onlyAdmin {\r\n        require(!activeAdventures[_user][_adventureId].isCompleted, \"Adventure already completed\");\r\n        activeAdventures[_user][_adventureId].isCompleted = true;\r\n        emit AdventureCompleted(_user, _adventureId, 0, false); // 0 reward, no pack\r\n    }\r\n\r\n    function toggleEmergencyMode() external onlyAdmin {\r\n        // Implementation for emergency mode\r\n        emit EmergencyModeToggled();\r\n    }\r\n\r\n    // ============ ADMIN SETUP ============\r\n\r\n    function setAdminContract(address _adminContract) external onlyOwner {\r\n        require(_adminContract != address(0), \"Invalid admin contract address\");\r\n        require(adminContract == address(0), \"Admin contract already set\");\r\n        adminContract = _adminContract;\r\n    }\r\n\r\n    function updateAdminContract(address _newAdminContract) external onlyOwner {\r\n        require(_newAdminContract != address(0), \"Invalid admin contract address\");\r\n        adminContract = _newAdminContract;\r\n    }\r\n\r\n    function setPackOpenerContract(address _packOpenerContract) external onlyOwner {\r\n        require(_packOpenerContract != address(0), \"Invalid pack opener contract address\");\r\n        packOpenerContract = _packOpenerContract;\r\n    }\r\n\r\n    // ============ PLAYER FUNCTIONS ============\r\n\r\n    function purchaseEnergy(uint256 _energyAmount) external payable nonReentrant whenNotPaused {\r\n        uint256 totalCost = _energyAmount * ENERGY_REFILL_COST;\r\n        require(msg.value >= totalCost, \"Insufficient AVAX payment\");\r\n\r\n        _resetEnergyIfNeeded(msg.sender);\r\n        energyRemaining[msg.sender] += _energyAmount;\r\n\r\n        // Refund excess AVAX\r\n        if (msg.value > totalCost) {\r\n            payable(msg.sender).transfer(msg.value - totalCost);\r\n        }\r\n\r\n        emit EnergyPurchased(msg.sender, _energyAmount, totalCost);\r\n    }\r\n\r\n    function upgradeDeckSlots() external payable nonReentrant whenNotPaused {\r\n        require(msg.value >= DECK_SLOT_UPGRADE_COST, \"Insufficient AVAX payment\");\r\n        require(maxDeckSlots[msg.sender] == MAX_DECK_SLOTS_DEFAULT, \"Already upgraded\");\r\n\r\n        maxDeckSlots[msg.sender] = MAX_DECK_SLOTS_PREMIUM;\r\n\r\n        if (msg.value > DECK_SLOT_UPGRADE_COST) {\r\n            payable(msg.sender).transfer(msg.value - DECK_SLOT_UPGRADE_COST);\r\n        }\r\n\r\n        emit DeckSlotUpgraded(msg.sender, MAX_DECK_SLOTS_PREMIUM);\r\n    }\r\n\r\n    function saveDeck(\r\n        uint256 _deckIndex,\r\n        string memory _name,\r\n        uint256[] memory _avamonIds\r\n    ) external nonReentrant whenNotPaused ownsAvamons(msg.sender, _avamonIds) {\r\n        require(_deckIndex < maxDeckSlots[msg.sender], \"Invalid deck index\");\r\n        require(_avamonIds.length > 0, \"Deck cannot be empty\");\r\n\r\n        if (_deckIndex >= savedDecks[msg.sender].length) {\r\n            savedDecks[msg.sender].push();\r\n        }\r\n\r\n        savedDecks[msg.sender][_deckIndex] = PlayerDeck({\r\n            avamonIds: _avamonIds,\r\n            name: _name\r\n        });\r\n\r\n        emit DeckSaved(msg.sender, _deckIndex, _name);\r\n    }\r\n\r\n    function joinAdventure(\r\n        uint256 _adventureId,\r\n        uint256[] memory _avamonIds\r\n    )\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        onlyValidAdventure(_adventureId)\r\n        adventureNotActive(msg.sender, _adventureId)\r\n        hasEnergy(msg.sender, 1)\r\n        ownsAvamons(msg.sender, _avamonIds)\r\n    {\r\n        Adventure memory adventure = adventures[_adventureId];\r\n\r\n        // Check entry fee\r\n        if (adventure.entryFee > 0) {\r\n            require(avamonToken.balanceOf(msg.sender) >= adventure.entryFee, \"Insufficient $AM balance\");\r\n            avamonToken.transferFrom(msg.sender, address(this), adventure.entryFee);\r\n        }\r\n\r\n        // Consume energy\r\n        energyRemaining[msg.sender]--;\r\n\r\n        // Lock Avamons (transfer to contract)\r\n        for (uint256 i = 0; i < _avamonIds.length; i++) {\r\n            avamonCards.transferFrom(msg.sender, address(this), _avamonIds[i]);\r\n        }\r\n\r\n        // Create active adventure\r\n        activeAdventures[msg.sender][_adventureId] = ActiveAdventure({\r\n            adventureId: _adventureId,\r\n            startTime: block.timestamp,\r\n            avamonIds: _avamonIds,\r\n            isCompleted: false,\r\n            rewardClaimed: false\r\n        });\r\n\r\n        emit AdventureJoined(msg.sender, _adventureId, _avamonIds);\r\n    }\r\n\r\n    function claimAdventureReward(uint256 _adventureId)\r\n        external\r\n        nonReentrant\r\n        whenNotPaused\r\n        adventureActive(msg.sender, _adventureId)\r\n    {\r\n        _completeAdventure(msg.sender, _adventureId);\r\n    }\r\n\r\n    // Pack purchasing removed - packs are only obtainable through quest rewards and adventure drops\r\n\r\n    // Pack opening is now handled by AvamonPackOpener contract\r\n    function updateQuestProgressForPackOpening(address _user) external {\r\n        require(msg.sender == packOpenerContract, \"Only pack opener contract can call this\");\r\n        _updateQuestProgress(_user, QuestType.OpenPacks, 1);\r\n    }\r\n\r\n    // ============ QUEST PLAYER FUNCTIONS ============\r\n\r\n    function buyWeeklyQuestSlot() external payable nonReentrant whenNotPaused {\r\n        uint256 cost = 0.05 ether; // 0.05 AVAX\r\n        require(msg.value >= cost, \"Insufficient AVAX payment\");\r\n        require(userWeeklyQuestSlots[msg.sender] < 3, \"Maximum weekly quest slots reached\");\r\n\r\n        userWeeklyQuestSlots[msg.sender]++;\r\n\r\n        // Refund excess AVAX\r\n        if (msg.value > cost) {\r\n            payable(msg.sender).transfer(msg.value - cost);\r\n        }\r\n\r\n        emit WeeklyQuestSlotPurchased(msg.sender, cost);\r\n    }\r\n\r\n    function claimQuestReward(uint256 _questId) external nonReentrant whenNotPaused {\r\n        UserQuestProgress storage progress = userQuestProgress[msg.sender][_questId];\r\n        Quest memory quest = quests[_questId];\r\n\r\n        require(progress.isCompleted, \"Quest not completed\");\r\n        require(!progress.isClaimed, \"Reward already claimed\");\r\n        require(quest.isActive, \"Quest not active\");\r\n\r\n        // Mark as claimed\r\n        progress.isClaimed = true;\r\n\r\n        // Give reward\r\n        if (quest.isPackReward) {\r\n            uint256 packId = avamonPacks.getNextPackId();\r\n            avamonPacks.mintPack(msg.sender, packId, 1);\r\n            emit PackMinted(msg.sender, packId, quest.packTypeId);\r\n            emit QuestRewardClaimed(msg.sender, _questId, 1, true);\r\n        } else {\r\n            require(avamonToken.balanceOf(address(this)) >= quest.rewardAmount, \"Insufficient reward pool\");\r\n            avamonToken.transfer(msg.sender, quest.rewardAmount);\r\n            emit QuestRewardClaimed(msg.sender, _questId, quest.rewardAmount, false);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @dev Complete and claim daily check-in quest in one transaction\r\n     * Only works for quest ID 1 (daily check-in)\r\n     */\r\n    function completeDailyCheckin() external nonReentrant whenNotPaused {\r\n        require(quests[1].id == 1, \"Daily check-in quest not configured\");\r\n\r\n        UserQuestProgress storage progress = userQuestProgress[msg.sender][1];\r\n        Quest memory quest = quests[1];\r\n\r\n        require(quest.isActive, \"Quest not active\");\r\n        require(!progress.isCompleted, \"Quest already completed\");\r\n        require(!progress.isClaimed, \"Reward already claimed\");\r\n\r\n        // Mark quest as completed and claimed\r\n        progress.progress = 1;\r\n        progress.isCompleted = true;\r\n        progress.isClaimed = true;\r\n        progress.lastUpdated = block.timestamp;\r\n\r\n        // Give reward\r\n        if (quest.isPackReward) {\r\n            // The quest.packTypeId corresponds to the pack ID in AvamonPacks\r\n            // since we create them in order: packTypeId 1 -> packId 1, etc.\r\n            uint256 packId = quest.packTypeId;\r\n            avamonPacks.mintPack(msg.sender, packId, 1);\r\n            emit PackMinted(msg.sender, packId, quest.packTypeId);\r\n            emit QuestRewardClaimed(msg.sender, 1, 1, true);\r\n        } else {\r\n            require(avamonToken.balanceOf(address(this)) >= quest.rewardAmount, \"Insufficient reward pool\");\r\n            avamonToken.transfer(msg.sender, quest.rewardAmount);\r\n            emit QuestRewardClaimed(msg.sender, 1, quest.rewardAmount, false);\r\n        }\r\n\r\n        emit QuestCompleted(msg.sender, 1);\r\n    }\r\n\r\n    function getUserQuestProgress(address _user, uint256 _questId) external view returns (UserQuestProgress memory) {\r\n        return userQuestProgress[_user][_questId];\r\n    }\r\n\r\n    function getActiveQuestsForUser(address _user) external view returns (uint256[] memory) {\r\n        return userActiveQuests[_user];\r\n    }\r\n\r\n    function getQuest(uint256 _questId) external view returns (Quest memory) {\r\n        return quests[_questId];\r\n    }\r\n\r\n    // ============ VIEW FUNCTIONS FOR PACK OPENER ============\r\n\r\n    function getPackType(uint256 _packTypeId) external view returns (\r\n        uint256 id,\r\n        string memory name,\r\n        uint256 price,\r\n        uint8[3] memory rarityChances,\r\n        bool isActive\r\n    ) {\r\n        PackType memory packType = packTypes[_packTypeId];\r\n        return (packType.id, packType.name, packType.price, packType.rarityChances, packType.isActive);\r\n    }\r\n\r\n    function getCardTemplate(uint256 _templateId) external view returns (\r\n        uint256 id,\r\n        string memory name,\r\n        uint8 rarity,\r\n        uint256 attack,\r\n        uint256 defense,\r\n        uint256 agility,\r\n        uint256 hp,\r\n        bool isActive\r\n    ) {\r\n        CardTemplate memory template = cardTemplates[_templateId];\r\n        return (template.id, template.name, template.rarity, template.attack, template.defense, template.agility, template.hp, template.isActive);\r\n    }\r\n\r\n    function getCommonCardIds() external view returns (uint256[] memory) {\r\n        return commonCardIds;\r\n    }\r\n\r\n    function getRareCardIds() external view returns (uint256[] memory) {\r\n        return rareCardIds;\r\n    }\r\n\r\n    function getMythicCardIds() external view returns (uint256[] memory) {\r\n        return mythicCardIds;\r\n    }\r\n\r\n    function _completeAdventure(\r\n        address _player,\r\n        uint256 _adventureId\r\n    ) internal {\r\n        ActiveAdventure storage activeAdv = activeAdventures[_player][_adventureId];\r\n        Adventure memory adventure = adventures[_adventureId];\r\n\r\n        require(!activeAdv.rewardClaimed, \"Reward already claimed\");\r\n        require(activeAdv.startTime + adventure.duration <= block.timestamp, \"Adventure not completed yet\");\r\n\r\n        // Calculate reward using block-based randomness\r\n        uint256 randomSeed = uint256(keccak256(abi.encodePacked(block.timestamp, block.difficulty, _player, _adventureId)));\r\n        uint256 rewardRange = adventure.maxReward - adventure.minReward;\r\n        uint256 reward = adventure.minReward + (randomSeed % (rewardRange + 1));\r\n\r\n        // Check for pack drop\r\n        bool packDropped = ((randomSeed >> 128) % 100) < adventure.packDropChance;\r\n\r\n        // Mark as completed and claimed\r\n        activeAdv.isCompleted = true;\r\n        activeAdv.rewardClaimed = true;\r\n\r\n        // Update quest progress for winning battles\r\n        _updateQuestProgress(_player, QuestType.WinBattles, 1);\r\n\r\n        // Return Avamons to player\r\n        for (uint256 i = 0; i < activeAdv.avamonIds.length; i++) {\r\n            avamonCards.transferFrom(address(this), _player, activeAdv.avamonIds[i]);\r\n        }\r\n\r\n        // Transfer reward\r\n        if (reward > 0) {\r\n            require(avamonToken.balanceOf(address(this)) >= reward, \"Insufficient reward pool\");\r\n            avamonToken.transfer(_player, reward);\r\n        }\r\n\r\n        // Mint pack if dropped\r\n        if (packDropped) {\r\n            uint256 packId = avamonPacks.getNextPackId();\r\n            avamonPacks.mintPack(_player, packId, 1);\r\n            emit PackMinted(_player, packId, adventure.packTypeId);\r\n        }\r\n\r\n        emit AdventureCompleted(_player, _adventureId, reward, packDropped);\r\n    }\r\n\r\n\r\n    // ============ VIEW FUNCTIONS ============\r\n\r\n    function getCurrentEnergy(address _player) external view returns (uint256) {\r\n        uint256 energy = energyRemaining[_player];\r\n\r\n        // Check if reset is needed\r\n        if (_shouldResetEnergy(_player)) {\r\n            return DAILY_ENERGY;\r\n        }\r\n\r\n        return energy;\r\n    }\r\n\r\n    function getActiveAdventures(address _player) external view returns (uint256[] memory) {\r\n        uint256[] memory tempAdventures = new uint256[](nextAdventureId);\r\n        uint256 count = 0;\r\n\r\n        for (uint256 i = 1; i < nextAdventureId; i++) {\r\n            if (activeAdventures[_player][i].startTime > 0 && !activeAdventures[_player][i].isCompleted) {\r\n                tempAdventures[count] = i;\r\n                count++;\r\n            }\r\n        }\r\n\r\n        uint256[] memory result = new uint256[](count);\r\n        for (uint256 i = 0; i < count; i++) {\r\n            result[i] = tempAdventures[i];\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    function getSavedDecks(address _player) external view returns (PlayerDeck[] memory) {\r\n        return savedDecks[_player];\r\n    }\r\n\r\n\r\n    function getAdventure(uint256 _adventureId) external view returns (Adventure memory) {\r\n        return adventures[_adventureId];\r\n    }\r\n\r\n    // ============ INTERNAL FUNCTIONS ============\r\n\r\n    function _resetEnergyIfNeeded(address _player) internal {\r\n        if (_shouldResetEnergy(_player)) {\r\n            energyRemaining[_player] = DAILY_ENERGY;\r\n            lastEnergyResetIST[_player] = block.timestamp;\r\n        }\r\n    }\r\n\r\n    function _shouldResetEnergy(address _player) internal view returns (bool) {\r\n        // Simple daily reset logic (24 hours)\r\n        return block.timestamp >= lastEnergyResetIST[_player] + 24 hours;\r\n    }\r\n\r\n    function _updateQuestProgress(address _player, QuestType _questType, uint256 _increment) internal {\r\n        // Find all active quests of this type for the player\r\n        uint256[] memory activeQuestIds = userActiveQuests[_player];\r\n\r\n        for (uint256 i = 0; i < activeQuestIds.length; i++) {\r\n            uint256 questId = activeQuestIds[i];\r\n            Quest memory quest = quests[questId];\r\n\r\n            if (quest.questType == _questType && quest.isActive) {\r\n                UserQuestProgress storage progress = userQuestProgress[_player][questId];\r\n\r\n                // Check if quest needs to be reset (daily/weekly)\r\n                if (_shouldResetQuest(_player, questId)) {\r\n                    _resetUserQuest(_player, questId);\r\n                }\r\n\r\n                // Update progress if not completed\r\n                if (!progress.isCompleted) {\r\n                    progress.progress += _increment;\r\n                    progress.lastUpdated = block.timestamp;\r\n\r\n                    // Check if quest is completed\r\n                    if (progress.progress >= quest.targetValue) {\r\n                        progress.isCompleted = true;\r\n                        emit QuestCompleted(_player, questId);\r\n                    }\r\n\r\n                    emit QuestProgressUpdated(_player, questId, progress.progress);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    function _shouldResetQuest(address _player, uint256 _questId) internal view returns (bool) {\r\n        UserQuestProgress memory progress = userQuestProgress[_player][_questId];\r\n        Quest memory quest = quests[_questId];\r\n\r\n        uint256 resetInterval = quest.timeWindow * 1 days; // 1 day for daily, 7 days for weekly\r\n        return block.timestamp >= progress.resetTime + resetInterval;\r\n    }\r\n\r\n    function _resetUserQuest(address _player, uint256 _questId) internal {\r\n        userQuestProgress[_player][_questId] = UserQuestProgress({\r\n            questId: _questId,\r\n            progress: 0,\r\n            isCompleted: false,\r\n            isClaimed: false,\r\n            lastUpdated: block.timestamp,\r\n            resetTime: block.timestamp\r\n        });\r\n    }\r\n\r\n    // ============ EMERGENCY FUNCTIONS ============\r\n\r\n    function pause() external onlyOwner {\r\n        _pause();\r\n    }\r\n\r\n    function unpause() external onlyOwner {\r\n        _unpause();\r\n    }\r\n\r\n    function withdrawAVAX() external onlyOwner {\r\n        payable(owner()).transfer(address(this).balance);\r\n    }\r\n\r\n    // ============ RECEIVE FUNCTION ============\r\n    receive() external payable {}\r\n}\r\n\r\n"
    },
    "contracts/AvamonPackOpener.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n\n// Import interfaces for the token contracts\ninterface IAvamonCards {\n    function mintCard(\n        address to,\n        uint256 templateId,\n        uint256 attack,\n        uint256 defense,\n        uint256 agility,\n        uint256 hp,\n        uint8 rarity\n    ) external returns (uint256);\n    function batchMintCards(\n        address to,\n        uint256[] calldata templateIds,\n        uint256[] calldata attacks,\n        uint256[] calldata defenses,\n        uint256[] calldata agilities,\n        uint256[] calldata hps,\n        uint8[] calldata rarities\n    ) external returns (uint256[] memory);\n}\n\ninterface IAvamonPacks {\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n    function burnPack(address account, uint256 id, uint256 amount) external;\n    function packInfo(uint256 packId) external view returns (uint256 packTypeId, string memory name, uint256 price, bool isActive);\n}\n\ninterface IAvamonCore {\n    function getPackType(uint256 _packTypeId) external view returns (\n        uint256 id,\n        string memory name,\n        uint256 price,\n        uint8[3] memory rarityChances,\n        bool isActive\n    );\n    function getCardTemplate(uint256 _templateId) external view returns (\n        uint256 id,\n        string memory name,\n        uint8 rarity,\n        uint256 attack,\n        uint256 defense,\n        uint256 agility,\n        uint256 hp,\n        bool isActive\n    );\n    function getCommonCardIds() external view returns (uint256[] memory);\n    function getRareCardIds() external view returns (uint256[] memory);\n    function getMythicCardIds() external view returns (uint256[] memory);\n}\n\n/**\n * @title AvamonPackOpener\n * @dev Handles pack opening logic with VRF integration\n */\ncontract AvamonPackOpener is Ownable, ReentrancyGuard, Pausable, VRFConsumerBaseV2 {\n    // Chainlink VRF Configuration\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\n    uint256 private immutable subscriptionId;\n    bytes32 private immutable keyHash;\n    uint32 private immutable callbackGasLimit = 100000;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n\n    // Contract addresses\n    IAvamonCards public immutable avamonCards;\n    IAvamonPacks public immutable avamonPacks;\n    IAvamonCore public immutable avamonCore;\n\n    // VRF Request tracking\n    struct PackOpenRequest {\n        address user;\n        uint256 packId;\n        uint256 packTypeId;\n        bool fulfilled;\n    }\n\n    mapping(uint256 => PackOpenRequest) public vrfRequests;\n\n    // Events\n    event PackOpenRequested(address indexed user, uint256 indexed packId, uint256 requestId);\n    event PackOpened(address indexed user, uint256 indexed packId, uint256[] cardIds);\n\n    constructor(\n        address initialOwner,\n        address _vrfCoordinator,\n        uint256 _subscriptionId,\n        bytes32 _keyHash,\n        address _avamonCards,\n        address _avamonPacks,\n        address _avamonCore\n    )\n        Ownable(initialOwner)\n        VRFConsumerBaseV2(_vrfCoordinator)\n    {\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\n        subscriptionId = _subscriptionId;\n        keyHash = _keyHash;\n        avamonCards = IAvamonCards(_avamonCards);\n        avamonPacks = IAvamonPacks(_avamonPacks);\n        avamonCore = IAvamonCore(_avamonCore);\n    }\n\n    /**\n     * @dev Open a pack using VRF for randomness\n     */\n    function openPack(uint256 _packId) external nonReentrant whenNotPaused {\n        require(avamonPacks.balanceOf(msg.sender, _packId) > 0, \"Does not own this pack\");\n        \n        // Get pack info from packs contract to find the pack type ID\n        (uint256 packTypeId, , , bool packIsActive) = avamonPacks.packInfo(_packId);\n        require(packIsActive, \"Pack not active\");\n        \n        // Get pack type info from core contract using the pack type ID\n        (uint256 id, , , uint8[3] memory rarityChances, bool isActive) = avamonCore.getPackType(packTypeId);\n        require(isActive, \"Pack type not active\");\n\n        // Burn the pack\n        avamonPacks.burnPack(msg.sender, _packId, 1);\n\n        // Request randomness from VRF\n        uint256 requestId = vrfCoordinator.requestRandomWords(\n            keyHash,\n            uint64(subscriptionId),\n            REQUEST_CONFIRMATIONS,\n            callbackGasLimit,\n            5 // Number of random words (5 cards per pack)\n        );\n\n        vrfRequests[requestId] = PackOpenRequest({\n            user: msg.sender,\n            packId: _packId,\n            packTypeId: packTypeId,\n            fulfilled: false\n        });\n\n        emit PackOpenRequested(msg.sender, _packId, requestId);\n    }\n\n    /**\n     * @dev Callback function used by VRF Coordinator\n     */\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\n        PackOpenRequest storage request = vrfRequests[_requestId];\n        require(!request.fulfilled, \"Invalid VRF request\");\n        \n        request.fulfilled = true;\n\n        // Generate cards based on pack type and random words\n        uint256[] memory newCardIds = new uint256[](5);\n        uint256[] memory templateIds = new uint256[](5);\n        uint256[] memory attacks = new uint256[](5);\n        uint256[] memory defenses = new uint256[](5);\n        uint256[] memory agilities = new uint256[](5);\n        uint256[] memory hps = new uint256[](5);\n        uint8[] memory rarities = new uint8[](5);\n\n        // Generate cards based on specific pack type rules\n        uint8[] memory cardRarities = _getPackCardRarities(request.packTypeId, _randomWords);\n        \n        for (uint256 i = 0; i < 5; i++) {\n            uint256 templateId = _getRandomTemplate(cardRarities[i], _randomWords[i]);\n            \n            if (templateId > 0) {\n                (, , , uint256 attack, uint256 defense, uint256 agility, uint256 hp, ) = \n                    avamonCore.getCardTemplate(templateId);\n                \n                templateIds[i] = templateId;\n                attacks[i] = attack;\n                defenses[i] = defense;\n                agilities[i] = agility;\n                hps[i] = hp;\n                rarities[i] = cardRarities[i];\n            }\n        }\n\n        // Mint the cards\n        newCardIds = avamonCards.batchMintCards(\n            request.user,\n            templateIds,\n            attacks,\n            defenses,\n            agilities,\n            hps,\n            rarities\n        );\n\n        emit PackOpened(request.user, request.packId, newCardIds);\n    }\n\n    /**\n     * @dev Get card rarities for specific pack types\n     * Blue Pack: 3 Commons, 1 Rare, 1 Rare/Mythic slot\n     * Green Pack: 4 Commons, 1 Rare\n     * Red Pack: 2 Commons, 2 Rares, 1 Rare/Mythic slot\n     */\n    function _getPackCardRarities(uint256 _packTypeId, uint256[] memory _randomWords) internal pure returns (uint8[] memory) {\n        uint8[] memory cardRarities = new uint8[](5);\n        \n        if (_packTypeId == 1) {\n            // Blue Pack: 3 Commons, 1 Rare, 1 Rare/Mythic slot\n            cardRarities[0] = 0; // Common\n            cardRarities[1] = 0; // Common\n            cardRarities[2] = 0; // Common\n            cardRarities[3] = 1; // Rare\n            // Last slot: 80% Rare, 20% Mythic\n            cardRarities[4] = (_randomWords[4] % 100) < 80 ? 1 : 2;\n        } else if (_packTypeId == 2) {\n            // Green Pack: 4 Commons, 1 Rare (small mythic chance)\n            cardRarities[0] = 0; // Common\n            cardRarities[1] = 0; // Common\n            cardRarities[2] = 0; // Common\n            cardRarities[3] = 0; // Common\n            // Last slot: 95% Rare, 5% Mythic\n            cardRarities[4] = (_randomWords[4] % 100) < 95 ? 1 : 2;\n        } else if (_packTypeId == 3) {\n            // Red Pack: 2 Commons, 2 Rares, 1 Rare/Mythic slot\n            cardRarities[0] = 0; // Common\n            cardRarities[1] = 0; // Common\n            cardRarities[2] = 1; // Rare\n            cardRarities[3] = 1; // Rare\n            // Last slot: 70% Rare, 30% Mythic\n            cardRarities[4] = (_randomWords[4] % 100) < 70 ? 1 : 2;\n        } else {\n            // Default fallback: all commons\n            for (uint256 i = 0; i < 5; i++) {\n                cardRarities[i] = 0;\n            }\n        }\n        \n        return cardRarities;\n    }\n\n    /**\n     * @dev Get random template ID for given rarity\n     */\n    function _getRandomTemplate(uint8 _rarity, uint256 _randomSeed) internal view returns (uint256) {\n        uint256[] memory cardIds;\n        \n        if (_rarity == 0) {\n            cardIds = avamonCore.getCommonCardIds();\n        } else if (_rarity == 1) {\n            cardIds = avamonCore.getRareCardIds();\n        } else {\n            cardIds = avamonCore.getMythicCardIds();\n        }\n\n        if (cardIds.length == 0) return 0;\n        \n        return cardIds[_randomSeed % cardIds.length];\n    }\n\n    /**\n     * @dev Emergency function to manually fulfill a pack opening (in case VRF fails)\n     */\n    function emergencyFulfillPack(uint256 _requestId) external onlyOwner {\n        PackOpenRequest storage request = vrfRequests[_requestId];\n        require(!request.fulfilled, \"Request already fulfilled\");\n        \n        // Use block-based randomness as fallback\n        uint256[] memory fallbackRandomWords = new uint256[](5);\n        for (uint256 i = 0; i < 5; i++) {\n            fallbackRandomWords[i] = uint256(keccak256(abi.encodePacked(\n                block.timestamp,\n                block.difficulty,\n                request.user,\n                i\n            )));\n        }\n        \n        fulfillRandomWords(_requestId, fallbackRandomWords);\n    }\n\n    /**\n     * @dev Get VRF request info\n     */\n    function getVRFRequest(uint256 _requestId) external view returns (PackOpenRequest memory) {\n        return vrfRequests[_requestId];\n    }\n\n    // ============ EMERGENCY FUNCTIONS ============\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    },
    "contracts/AvamonPacks.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/token/ERC1155/ERC1155.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/Strings.sol\";\n\n/**\n * @title AvamonPacks\n * @dev ERC1155 token for Avamon TCG booster packs\n */\ncontract AvamonPacks is ERC1155, Ownable {\n    // Pack metadata\n    struct PackInfo {\n        uint256 packTypeId;\n        string name;\n        uint256 price; // $AM cost\n        bool isActive;\n    }\n\n    mapping(uint256 => PackInfo) public packInfo;\n    mapping(uint256 => string) private _uris;\n    uint256 private _nextPackId = 1; // Start from 1 to match AvamonCore pack type IDs\n\n    event PackCreated(uint256 indexed packId, uint256 indexed packTypeId, string name);\n    event PackMinted(address indexed to, uint256 indexed packId, uint256 amount);\n\n    constructor(address initialOwner)\n        ERC1155(\"\")\n        Ownable(initialOwner)\n    {}\n\n    /**\n     * @dev Create a new pack type\n     */\n    function createPackType(\n        uint256 packTypeId,\n        string memory name,\n        uint256 price\n    ) external onlyOwner {\n        uint256 packId = _nextPackId++;\n\n        packInfo[packId] = PackInfo({\n            packTypeId: packTypeId,\n            name: name,\n            price: price,\n            isActive: true\n        });\n\n        emit PackCreated(packId, packTypeId, name);\n    }\n\n    /**\n     * @dev Mint packs\n     */\n    function mintPack(\n        address to,\n        uint256 packId,\n        uint256 amount\n    ) external onlyOwner {\n        require(packInfo[packId].isActive, \"Pack type not active\");\n        _mint(to, packId, amount, \"\");\n        emit PackMinted(to, packId, amount);\n    }\n\n    /**\n     * @dev Batch mint packs\n     */\n    function batchMintPacks(\n        address to,\n        uint256[] calldata packIds,\n        uint256[] calldata amounts\n    ) external onlyOwner {\n        require(packIds.length == amounts.length, \"Array lengths mismatch\");\n\n        for (uint256 i = 0; i < packIds.length; i++) {\n            require(packInfo[packIds[i]].isActive, \"Pack type not active\");\n            _mint(to, packIds[i], amounts[i], \"\");\n            emit PackMinted(to, packIds[i], amounts[i]);\n        }\n    }\n\n    /**\n     * @dev Burn packs (when opening)\n     */\n    function burnPack(\n        address from,\n        uint256 packId,\n        uint256 amount\n    ) external onlyOwner {\n        _burn(from, packId, amount);\n    }\n\n    /**\n     * @dev Set URI for pack type\n     */\n    function setURI(uint256 packId, string memory newuri) external onlyOwner {\n        _uris[packId] = newuri;\n    }\n\n    /**\n     * @dev Override uri function\n     */\n    function uri(uint256 packId) public view virtual override returns (string memory) {\n        string memory _uri = _uris[packId];\n        if (bytes(_uri).length > 0) {\n            return _uri;\n        }\n        // IPFS metadata - updated with new CID for pack metadata\n        string memory filename = _getPackFilename(packId);\n        return string(abi.encodePacked(\"https://gateway.pinata.cloud/ipfs/bafybeig5qr54usveydn7rvcwatglszea4a4z62yu4nsn3ow5cigx6ai5re/\", filename));\n    }\n\n    /**\n     * @dev Get the filename for a pack ID\n     */\n    function _getPackFilename(uint256 packId) internal pure returns (string memory) {\n        if (packId == 1) return \"blue.json\";  // Pack ID 1 = Blue Pack (pack type ID 1)\n        if (packId == 2) return \"green.json\"; // Pack ID 2 = Green Pack (pack type ID 2)\n        if (packId == 3) return \"red.json\";   // Pack ID 3 = Red Pack (pack type ID 3)\n        return \"unknown.json\"; // fallback\n    }\n\n    /**\n     * @dev Update pack type status\n     */\n    function setPackActive(uint256 packId, bool isActive) external onlyOwner {\n        packInfo[packId].isActive = isActive;\n    }\n\n    /**\n     * @dev Get next pack ID\n     */\n    function getNextPackId() external view returns (uint256) {\n        return _nextPackId;\n    }\n\n    /**\n     * @dev Get pack info\n     */\n    function getPackInfo(uint256 packId) external view returns (PackInfo memory) {\n        return packInfo[packId];\n    }\n\n    /**\n     * @dev Get pack type info (for core contract)\n     */\n    function getPackTypeInfo(uint256 packId) external view returns (uint256 packTypeId, string memory name, uint256 price, bool isActive) {\n        PackInfo memory info = packInfo[packId];\n        return (info.packTypeId, info.name, info.price, info.isActive);\n    }\n\n    /**\n     * @dev Get all pack types (for frontend)\n     */\n    function getAllPackTypes() external view returns (uint256[] memory) {\n        if (_nextPackId <= 1) {\n            return new uint256[](0);\n        }\n        \n        uint256[] memory packTypeIds = new uint256[](_nextPackId - 1);\n        for (uint256 i = 1; i < _nextPackId; i++) {\n            packTypeIds[i - 1] = i;\n        }\n        return packTypeIds;\n    }\n\n    /**\n     * @dev Emergency burn packs (admin only)\n     */\n    function emergencyBurnPacks(address from, uint256 packId, uint256 amount) external onlyOwner {\n        _burn(from, packId, amount);\n    }\n\n    /**\n     * @dev Update pack metadata URI\n     */\n    function updatePackMetadata(uint256 packId, string memory newUri) external onlyOwner {\n        _uris[packId] = newUri;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}