{
  "language": "Solidity",
  "sources": {
    "@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n// solhint-disable-next-line interface-starts-with-i\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig() external view returns (uint16, uint32, bytes32[] memory);\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(\n    uint64 subId\n  ) external view returns (uint96 balance, uint64 reqCount, address owner, address[] memory consumers);\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n\n  /*\n   * @notice Check to see if there exists a request commitment consumers\n   * for all consumers and keyhashes for a given sub.\n   * @param subId - ID of the subscription\n   * @return true if there exists at least one unfulfilled request for the subscription, false\n   * otherwise.\n   */\n  function pendingRequestExists(uint64 subId) external view returns (bool);\n}\n"
    },
    "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.4;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  // solhint-disable-next-line chainlink-solidity/prefix-immutable-variables-with-i\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  // solhint-disable-next-line chainlink-solidity/prefix-internal-functions-with-underscore\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    },
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Pausable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    bool private _paused;\n\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    /**\n     * @dev The operation failed because the contract is paused.\n     */\n    error EnforcedPause();\n\n    /**\n     * @dev The operation failed because the contract is not paused.\n     */\n    error ExpectedPause();\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor() {\n        _paused = false;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        _requireNotPaused();\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        _requirePaused();\n        _;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view virtual returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Throws if the contract is paused.\n     */\n    function _requireNotPaused() internal view virtual {\n        if (paused()) {\n            revert EnforcedPause();\n        }\n    }\n\n    /**\n     * @dev Throws if the contract is not paused.\n     */\n    function _requirePaused() internal view virtual {\n        if (!paused()) {\n            revert ExpectedPause();\n        }\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant NOT_ENTERED = 1;\n    uint256 private constant ENTERED = 2;\n\n    uint256 private _status;\n\n    /**\n     * @dev Unauthorized reentrant call.\n     */\n    error ReentrancyGuardReentrantCall();\n\n    constructor() {\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\n        if (_status == ENTERED) {\n            revert ReentrancyGuardReentrantCall();\n        }\n\n        // Any calls to nonReentrant after this point will fail\n        _status = ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = NOT_ENTERED;\n    }\n\n    /**\n     * @dev Returns true if the reentrancy guard is currently set to \"entered\", which indicates there is a\n     * `nonReentrant` function in the call stack.\n     */\n    function _reentrancyGuardEntered() internal view returns (bool) {\n        return _status == ENTERED;\n    }\n}\n"
    },
    "contracts/AvamonPackOpener.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity >=0.8.0 <0.9.0;\n\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/utils/ReentrancyGuard.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol\";\nimport \"@chainlink/contracts/src/v0.8/vrf/interfaces/VRFCoordinatorV2Interface.sol\";\n\n// Import interfaces for the token contracts\ninterface IAvamonCards {\n    function mintCard(\n        address to,\n        uint256 templateId,\n        uint256 attack,\n        uint256 defense,\n        uint256 agility,\n        uint256 hp,\n        uint8 rarity\n    ) external returns (uint256);\n    function batchMintCards(\n        address to,\n        uint256[] calldata templateIds,\n        uint256[] calldata attacks,\n        uint256[] calldata defenses,\n        uint256[] calldata agilities,\n        uint256[] calldata hps,\n        uint8[] calldata rarities\n    ) external returns (uint256[] memory);\n}\n\ninterface IAvamonPacks {\n    function balanceOf(address account, uint256 id) external view returns (uint256);\n    function burnPack(address account, uint256 id, uint256 amount) external;\n    function packInfo(uint256 packId) external view returns (uint256 packTypeId, string memory name, uint256 price, bool isActive);\n}\n\ninterface IAvamonCore {\n    function getPackType(uint256 _packTypeId) external view returns (\n        uint256 id,\n        string memory name,\n        uint256 price,\n        uint8[3] memory rarityChances,\n        bool isActive\n    );\n    function getCardTemplate(uint256 _templateId) external view returns (\n        uint256 id,\n        string memory name,\n        uint8 rarity,\n        uint256 attack,\n        uint256 defense,\n        uint256 agility,\n        uint256 hp,\n        bool isActive\n    );\n    function getCommonCardIds() external view returns (uint256[] memory);\n    function getRareCardIds() external view returns (uint256[] memory);\n    function getMythicCardIds() external view returns (uint256[] memory);\n}\n\n/**\n * @title AvamonPackOpener\n * @dev Handles pack opening logic with VRF integration\n */\ncontract AvamonPackOpener is Ownable, ReentrancyGuard, Pausable, VRFConsumerBaseV2 {\n    // Chainlink VRF Configuration\n    VRFCoordinatorV2Interface private immutable vrfCoordinator;\n    uint256 private immutable subscriptionId;\n    bytes32 private immutable keyHash;\n    uint32 private immutable callbackGasLimit = 100000;\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\n\n    // Contract addresses\n    IAvamonCards public immutable avamonCards;\n    IAvamonPacks public immutable avamonPacks;\n    IAvamonCore public immutable avamonCore;\n\n    // VRF Request tracking\n    struct PackOpenRequest {\n        address user;\n        uint256 packId;\n        uint256 packTypeId;\n        bool fulfilled;\n    }\n\n    mapping(uint256 => PackOpenRequest) public vrfRequests;\n\n    // Events\n    event PackOpenRequested(address indexed user, uint256 indexed packId, uint256 requestId);\n    event PackOpened(address indexed user, uint256 indexed packId, uint256[] cardIds);\n\n    constructor(\n        address initialOwner,\n        address _vrfCoordinator,\n        uint256 _subscriptionId,\n        bytes32 _keyHash,\n        address _avamonCards,\n        address _avamonPacks,\n        address _avamonCore\n    )\n        Ownable(initialOwner)\n        VRFConsumerBaseV2(_vrfCoordinator)\n    {\n        vrfCoordinator = VRFCoordinatorV2Interface(_vrfCoordinator);\n        subscriptionId = _subscriptionId;\n        keyHash = _keyHash;\n        avamonCards = IAvamonCards(_avamonCards);\n        avamonPacks = IAvamonPacks(_avamonPacks);\n        avamonCore = IAvamonCore(_avamonCore);\n    }\n\n    /**\n     * @dev Open a pack using VRF for randomness\n     */\n    function openPack(uint256 _packId) external nonReentrant whenNotPaused {\n        require(avamonPacks.balanceOf(msg.sender, _packId) > 0, \"Does not own this pack\");\n        \n        // Get pack info from packs contract to find the pack type ID\n        (uint256 packTypeId, , , bool packIsActive) = avamonPacks.packInfo(_packId);\n        require(packIsActive, \"Pack not active\");\n        \n        // Get pack type info from core contract using the pack type ID\n        (uint256 id, , , uint8[3] memory rarityChances, bool isActive) = avamonCore.getPackType(packTypeId);\n        require(isActive, \"Pack type not active\");\n\n        // Burn the pack\n        avamonPacks.burnPack(msg.sender, _packId, 1);\n\n        // Request randomness from VRF\n        uint256 requestId = vrfCoordinator.requestRandomWords(\n            keyHash,\n            uint64(subscriptionId),\n            REQUEST_CONFIRMATIONS,\n            callbackGasLimit,\n            5 // Number of random words (5 cards per pack)\n        );\n\n        vrfRequests[requestId] = PackOpenRequest({\n            user: msg.sender,\n            packId: _packId,\n            packTypeId: packTypeId,\n            fulfilled: false\n        });\n\n        emit PackOpenRequested(msg.sender, _packId, requestId);\n    }\n\n    /**\n     * @dev Callback function used by VRF Coordinator\n     */\n    function fulfillRandomWords(uint256 _requestId, uint256[] memory _randomWords) internal override {\n        PackOpenRequest storage request = vrfRequests[_requestId];\n        require(!request.fulfilled, \"Invalid VRF request\");\n        \n        request.fulfilled = true;\n\n        // Generate cards based on pack type and random words\n        uint256[] memory newCardIds = new uint256[](5);\n        uint256[] memory templateIds = new uint256[](5);\n        uint256[] memory attacks = new uint256[](5);\n        uint256[] memory defenses = new uint256[](5);\n        uint256[] memory agilities = new uint256[](5);\n        uint256[] memory hps = new uint256[](5);\n        uint8[] memory rarities = new uint8[](5);\n\n        // Generate cards based on specific pack type rules\n        uint8[] memory cardRarities = _getPackCardRarities(request.packTypeId, _randomWords);\n        \n        for (uint256 i = 0; i < 5; i++) {\n            uint256 templateId = _getRandomTemplate(cardRarities[i], _randomWords[i]);\n            \n            if (templateId > 0) {\n                (, , , uint256 attack, uint256 defense, uint256 agility, uint256 hp, ) = \n                    avamonCore.getCardTemplate(templateId);\n                \n                templateIds[i] = templateId;\n                attacks[i] = attack;\n                defenses[i] = defense;\n                agilities[i] = agility;\n                hps[i] = hp;\n                rarities[i] = cardRarities[i];\n            }\n        }\n\n        // Mint the cards\n        newCardIds = avamonCards.batchMintCards(\n            request.user,\n            templateIds,\n            attacks,\n            defenses,\n            agilities,\n            hps,\n            rarities\n        );\n\n        emit PackOpened(request.user, request.packId, newCardIds);\n    }\n\n    /**\n     * @dev Get card rarities for specific pack types\n     * Blue Pack: 3 Commons, 1 Rare, 1 Rare/Mythic slot\n     * Green Pack: 4 Commons, 1 Rare\n     * Red Pack: 2 Commons, 2 Rares, 1 Rare/Mythic slot\n     */\n    function _getPackCardRarities(uint256 _packTypeId, uint256[] memory _randomWords) internal pure returns (uint8[] memory) {\n        uint8[] memory cardRarities = new uint8[](5);\n        \n        if (_packTypeId == 1) {\n            // Blue Pack: 3 Commons, 1 Rare, 1 Rare/Mythic slot\n            cardRarities[0] = 0; // Common\n            cardRarities[1] = 0; // Common\n            cardRarities[2] = 0; // Common\n            cardRarities[3] = 1; // Rare\n            // Last slot: 80% Rare, 20% Mythic\n            cardRarities[4] = (_randomWords[4] % 100) < 80 ? 1 : 2;\n        } else if (_packTypeId == 2) {\n            // Green Pack: 4 Commons, 1 Rare (small mythic chance)\n            cardRarities[0] = 0; // Common\n            cardRarities[1] = 0; // Common\n            cardRarities[2] = 0; // Common\n            cardRarities[3] = 0; // Common\n            // Last slot: 95% Rare, 5% Mythic\n            cardRarities[4] = (_randomWords[4] % 100) < 95 ? 1 : 2;\n        } else if (_packTypeId == 3) {\n            // Red Pack: 2 Commons, 2 Rares, 1 Rare/Mythic slot\n            cardRarities[0] = 0; // Common\n            cardRarities[1] = 0; // Common\n            cardRarities[2] = 1; // Rare\n            cardRarities[3] = 1; // Rare\n            // Last slot: 70% Rare, 30% Mythic\n            cardRarities[4] = (_randomWords[4] % 100) < 70 ? 1 : 2;\n        } else {\n            // Default fallback: all commons\n            for (uint256 i = 0; i < 5; i++) {\n                cardRarities[i] = 0;\n            }\n        }\n        \n        return cardRarities;\n    }\n\n    /**\n     * @dev Get random template ID for given rarity\n     */\n    function _getRandomTemplate(uint8 _rarity, uint256 _randomSeed) internal view returns (uint256) {\n        uint256[] memory cardIds;\n        \n        if (_rarity == 0) {\n            cardIds = avamonCore.getCommonCardIds();\n        } else if (_rarity == 1) {\n            cardIds = avamonCore.getRareCardIds();\n        } else {\n            cardIds = avamonCore.getMythicCardIds();\n        }\n\n        if (cardIds.length == 0) return 0;\n        \n        return cardIds[_randomSeed % cardIds.length];\n    }\n\n    /**\n     * @dev Emergency function to manually fulfill a pack opening (in case VRF fails)\n     */\n    function emergencyFulfillPack(uint256 _requestId) external onlyOwner {\n        PackOpenRequest storage request = vrfRequests[_requestId];\n        require(!request.fulfilled, \"Request already fulfilled\");\n        \n        // Use block-based randomness as fallback\n        uint256[] memory fallbackRandomWords = new uint256[](5);\n        for (uint256 i = 0; i < 5; i++) {\n            fallbackRandomWords[i] = uint256(keccak256(abi.encodePacked(\n                block.timestamp,\n                block.difficulty,\n                request.user,\n                i\n            )));\n        }\n        \n        fulfillRandomWords(_requestId, fallbackRandomWords);\n    }\n\n    /**\n     * @dev Emergency pack opening without VRF (for testing/debugging)\n     */\n    function emergencyOpenPack(uint256 _packId) external nonReentrant whenNotPaused {\n        require(avamonPacks.balanceOf(msg.sender, _packId) > 0, \"Does not own this pack\");\n        \n        // Get pack info from packs contract to find the pack type ID\n        (uint256 packTypeId, , , bool packIsActive) = avamonPacks.packInfo(_packId);\n        require(packIsActive, \"Pack not active\");\n        \n        // Get pack type info from core contract using the pack type ID\n        (uint256 id, , , uint8[3] memory rarityChances, bool isActive) = avamonCore.getPackType(packTypeId);\n        require(isActive, \"Pack type not active\");\n\n        // Burn the pack\n        avamonPacks.burnPack(msg.sender, _packId, 1);\n\n        // Generate pseudo-random words using block data\n        uint256[] memory randomWords = new uint256[](5);\n        for (uint256 i = 0; i < 5; i++) {\n            randomWords[i] = uint256(keccak256(abi.encodePacked(\n                block.timestamp,\n                block.difficulty,\n                msg.sender,\n                _packId,\n                i\n            )));\n        }\n\n        // Generate cards directly without VRF\n        uint256[] memory templateIds = new uint256[](5);\n        uint256[] memory attacks = new uint256[](5);\n        uint256[] memory defenses = new uint256[](5);\n        uint256[] memory agilities = new uint256[](5);\n        uint256[] memory hps = new uint256[](5);\n        uint8[] memory rarities = new uint8[](5);\n\n        // Generate cards based on specific pack type rules\n        uint8[] memory cardRarities = _getPackCardRarities(packTypeId, randomWords);\n        \n        for (uint256 i = 0; i < 5; i++) {\n            uint256 templateId = _getRandomTemplate(cardRarities[i], randomWords[i]);\n            \n            if (templateId > 0) {\n                (, , , uint256 attack, uint256 defense, uint256 agility, uint256 hp, ) = \n                    avamonCore.getCardTemplate(templateId);\n                \n                templateIds[i] = templateId;\n                attacks[i] = attack;\n                defenses[i] = defense;\n                agilities[i] = agility;\n                hps[i] = hp;\n                rarities[i] = cardRarities[i];\n            }\n        }\n\n        // Mint the cards\n        uint256[] memory newCardIds = avamonCards.batchMintCards(\n            msg.sender,\n            templateIds,\n            attacks,\n            defenses,\n            agilities,\n            hps,\n            rarities\n        );\n\n        emit PackOpened(msg.sender, _packId, newCardIds);\n    }\n\n    /**\n     * @dev Get VRF request info\n     */\n    function getVRFRequest(uint256 _requestId) external view returns (PackOpenRequest memory) {\n        return vrfRequests[_requestId];\n    }\n\n    // ============ EMERGENCY FUNCTIONS ============\n\n    function pause() external onlyOwner {\n        _pause();\n    }\n\n    function unpause() external onlyOwner {\n        _unpause();\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 1
    },
    "viaIR": true,
    "evmVersion": "paris",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}